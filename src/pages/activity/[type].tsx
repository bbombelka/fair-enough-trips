import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { Footer, Navbar, PostCard } from "components";
import { CardList } from "components/card-list/CardList";
import { Post } from "components/card-list/CardList.types";
import { mongoClient } from "MongoClient";
import Config from "Config";
import { Activities } from "enums/categories";

type HomePageProps = {
  mainPost: Post;
  latestPosts: Post[];
  code: string;
};

const Category: NextPage<HomePageProps> = ({ mainPost, latestPosts, code }) => {
  const pageTitle = Activities.find((act) => act.code === code)?.name;

  return (
    <div>
      <Head>
        <title>{pageTitle} @ Fair Enough Trips</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <Navbar />
      <main>
        <PostCard
          isMainPostCard
          post={mainPost}
          displayScrollDownButton={Boolean(latestPosts.length)}
        />
        {Boolean(latestPosts.length) && (
          <CardList listTitle={`Latest ${pageTitle} posts`}>
            {latestPosts.map((post) => (
              <PostCard post={post} key={post.id} />
            ))}
          </CardList>
        )}
      </main>
      <Footer />
    </div>
  );
};

export default Category;

export const getStaticPaths: GetStaticPaths = async () => {
  await mongoClient.connect();

  const collection = mongoClient
    .db(Config.DB_NAME)
    .collection(Config.POSTS_COLLECTION);

  const posts = await collection.find().toArray();
  await mongoClient.close();

  const types = Array.from(
    new Set(posts.map(({ category }) => category.activity).flat()),
  )
    .map((code) => Activities.find((act) => act.code === code)?.url)
    .map((path) => ({ params: { type: path } }));

  return {
    paths: types,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  await mongoClient.connect();

  const code = Activities.find((act) => act.url === params?.type)?.code;

  const latestPosts = await mongoClient
    .db(Config.DB_NAME)
    .collection(Config.POSTS_COLLECTION)
    .find({ ["category.activity"]: code })
    .sort({ postDate: -1 })
    .toArray();

  const jsonParsed = JSON.parse(JSON.stringify(latestPosts));

  return {
    props: {
      mainPost: { ...jsonParsed[0] },
      latestPosts: jsonParsed.slice(1),
      code,
    },
  };
};
